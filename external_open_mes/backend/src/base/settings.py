"""
Django settings for base project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

import os
import environ

VERSION = '0.0.0'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()

# .envファイルからの環境変数の読み込みは、docker-composeのenv_fileディレクティブに任せます。
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')

DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK" : lambda request: env.bool('DEBUG'),
    "FETCH_INSTRUMENTATION_ENABLED": False,
}

# フロントエンドのオリジンを信頼する設定
# .env ファイルから読み込む。Vite開発サーバーやリバースプロキシからのリクエストを許可するために使用します。
CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[])

# CORS設定: Vite開発サーバーからのAPIリクエストを許可
# .env ファイルから読み込む。
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[])

# --- Cookie, CSRF, and Reverse Proxy Settings ---

# リバースプロキシ(Nginx)からのX-Forwarded-Protoヘッダーを信頼し、
# request.is_secure()が正しく動作するようにします。HTTPS環境では必須です。
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# 本番環境(HTTPS)ではセキュアなクッキーを使用します
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG

# CookieのSameSite属性。クロスオリジンリクエストを許可するために必要です。
CORS_ALLOW_CREDENTIALS = True
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'

# JavaScriptからCSRFトークンを読み取れるようにする
# フロントエンドの `getCookie('csrftoken')` が機能するために必要です。
CSRF_COOKIE_HTTPONLY = False

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'corsheaders',
    'django_vite',
    'debug_toolbar',
    'rest_framework',
    'django_static_md5url',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',

    'rest_framework_simplejwt.token_blacklist',
    # Project apps
    'base.apps.BaseConfig',
    'users.apps.UsersConfig',
    'production.apps.ProductionConfig',
    'inventory.apps.InventoryConfig',
    'machine.apps.MachineConfig',
    'quality.apps.QualityConfig',
    'master.apps.MasterConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'users.middleware.PasswordExpirationMiddleware', # パスワード有効期限
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'base.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# CSRFエラー発生時に、より詳細なデバッグ情報を含むJSONレスポンスを返すためのカスタムビュー
# 問題解決のため、一時的にコメントアウトしてDjangoのデフォルトエラーページを表示させ、原因を特定します。
# このビューが有効になっていると、CSRFエラーの真の原因が隠蔽され、汎用的な400エラーが返される可能性があります。
# CSRF_FAILURE_VIEW = 'users.rest.csrf_failure'

WSGI_APPLICATION = 'base.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': env.db(),

}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

# `collectstatic` が静的ファイルを集める場所 (本番環境用)
STATIC_ROOT = BASE_DIR / "staticfiles"

# `manage.py findstatic` が探す追加の静的ファイルディレクトリ
STATICFILES_DIRS = [
    # プロジェクト共通の静的ファイル置き場。このディレクトリはプロジェクトに存在しないため、リストを空にします。
]

# Vite (django-vite) と WhiteNoise の設定
# ------------------------------------------------------------------------------
DJANGO_VITE_DEV_MODE = DEBUG

# Viteのビルド成果物が出力されるパス
DJANGO_VITE_ASSETS_PATH = BASE_DIR.parent / "frontend" / "dist"

# 開発環境ではViteのビルドディレクトリを静的ファイルの探索対象に追加
if DEBUG:
    STATICFILES_DIRS.append(DJANGO_VITE_ASSETS_PATH)

# django-vite の設定
DJANGO_VITE = {
    "default": {
        "manifest_path": DJANGO_VITE_ASSETS_PATH / "manifest.json",
    }
}
# 開発時および本番起動時にViteのmanifest.jsonが見つからない警告(W001)を抑制します。
# 本番環境ではNginxがフロントエンドを直接配信するため、Djangoはmanifestを読み込む必要がありません。
SILENCED_SYSTEM_CHECKS = ['django_vite.W001']

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.SessionAuthentication', # APIではJWT認証を主とするため無効化
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}

# djangorestframework-simplejwt settings
SIMPLE_JWT = {
    # アクセストークンの有効期間
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    # リフレッシュトークンの有効期間
    'REFRESH_TOKEN_LIFETIME': timedelta(days=14),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# 本番環境ではWhiteNoiseが圧縮ファイルを配信できるように設定
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# カスタムユーザー
AUTH_USER_MODEL = 'users.CustomUser'
# ログインページのURL。Reactフロントエンドを使用するため、URL名をリバース解決するのではなく、
# フロントエンドのルーターが処理する固定パス '/login/' に設定します。
# これにより、LoginRequiredMixinなどがこのパスにリダイレクトし、Reactがログインページを表示できます。
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'  # ログイン後のリダイレクト先
LOGOUT_REDIRECT_URL = '/'  # ログアウト後のリダイレクト先

# settings.py
# ... other settings

PASSWORD_EXPIRATION_DAYS = 180 # 例: 90日

# LOGGING設定
# DEBUG=False の場合でも、エラーがコンソールに出力されるように設定します。
# これにより、DisallowedHostのような本番環境でのみ発生するエラーをDockerログで確認できます。
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django.security': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
# 有効期限を無効にする場合は 0 や None を設定
# PASSWORD_EXPIRATION_DAYS = None

# Celery Configuration Options
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Tokyo'
CELERY_TASK_TRACK_STARTED = True
